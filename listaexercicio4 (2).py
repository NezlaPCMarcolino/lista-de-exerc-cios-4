# -*- coding: utf-8 -*-
"""ListaExercicio4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FcDNL_riQMPOuQVxiwpp7es1nV0W6vWb

# üìä Projeto Final ‚Äì An√°lise Cont√°bil com Ajuste Econ√¥mico

Este projeto tem como objetivo integrar an√°lise de dados cont√°beis de empresas com indicadores econ√¥micos, utilizando Python, Pandas, Ipeadata e Streamlit.

1) Configure o t√≠tulo na barra do navegador, da p√°gina do projeto no Streamlit e descri√ß√£o inicial do projeto (peso: 1,0)

- T√≠tulo na barra (`page_title`): Lista de Exerc√≠cios 4
- T√≠tulo da p√°gina (`header`): Projeto Final ‚Äì An√°lise Cont√°bil com Ajuste Econ√¥mico
- Descri√ß√£o projeto (`write`): Este projeto tem como objetivo integrar an√°lise de dados cont√°beis de empresas com indicadores econ√¥micos, utilizando Python, Pandas, Ipeadata e Streamlit.

2) Importe os dados do arquivo empresas_dados.csv utilizando pandas e apresente todas as linhas da df (peso: 1,0)

Dica: Utilize `head(len(df))`
"""

import streamlit as st
import pandas as pd

st.set_page_config(
    page_title="Lista de Exerc√≠cios 4",
    layout="centered"
)

st.header("Projeto Final ‚Äì An√°lise Cont√°bil com Ajuste Econ√¥mico")

st.write("""
Este projeto tem como objetivo integrar an√°lise de dados cont√°beis de empresas com indicadores econ√¥micos,
utilizando Python, Pandas, Ipeadata e Streamlit.
""")

df = pd.read_csv('empresas_dados.csv')

st.subheader('Todas as Linhas da Tabela')
st.dataframe(df)

"""3) Calcule os indicadores Margem L√≠quida e ROA e salve como novas coluna da df. Depois apresente os dois indicadores no mesmo gr√°fico de linhas, agrupado por Ano  (peso: 1,0)

- Margem L√≠quida = Lucro L√≠quido / Receita L√≠quida * 100
- ROA = Lucro L√≠quido / Ativo Total *  100
"""

import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st

st.set_page_config(
    page_title="Lista de Exerc√≠cios 4 - Indicadores",
    layout="centered"
)

st.header("Projeto Final ‚Äì An√°lise Cont√°bil com Ajuste Econ√¥mico")

df = pd.read_csv('empresas_dados.csv', delimiter=';')

st.subheader("Colunas do DataFrame")
st.write(df.columns.tolist())

st.subheader("Visualiza√ß√£o dos Primeiros Registros")
st.dataframe(df.head())

df['Margem L√≠quida'] = (df['Lucro L√≠quido'] / df['Receita L√≠quida']) * 100
df['ROA'] = (df['Lucro L√≠quido'] / df['Ativo Total']) * 100

df_grouped = df.groupby('Ano')[['Margem L√≠quida', 'ROA']].mean().reset_index()

fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(df_grouped['Ano'], df_grouped['Margem L√≠quida'], marker='o', label='Margem L√≠quida (%)')
ax.plot(df_grouped['Ano'], df_grouped['ROA'], marker='o', label='ROA (%)')
ax.set_title('Margem L√≠quida e ROA ao longo dos anos')
ax.set_xlabel('Ano')
ax.set_ylabel('Percentual (%)')
ax.legend()
ax.grid()
ax.set_xticks(df_grouped['Ano'])

st.pyplot(fig)

"""4) Utilize o pacote ipeadatapy e fa√ßa busca para encontrar o indicador que traga o IPCA, taxa de varia√ß√£o, em % e anual: (peso: 2,0)

- Baixe os dados no per√≠odo de 2010 a 2024
- Altere o nome da coluna "YEAR" para "Ano"
- Altere o nome da coluna "VALUE ((% a.a.))" para "IPCA"
- Apresente a df para checar se tudo deu certo
"""

import streamlit as st
import pandas as pd
import ipeadatapy as ip

df_ipea = ip.timeseries('PRECOS12_IPCA12')
df_ipea = df_ipea.reset_index()
df_ipea = df_ipea[df_ipea['YEAR'].between(2010, 2024)]
df_ipea = df_ipea.rename(columns={'YEAR': 'Ano', 'VALUE (-)': 'IPCA'})
df_ipea = df_ipea[['Ano', 'IPCA']]

df_excel = pd.read_csv('empresas_dados.csv', delimiter=';')

df_combinada = pd.merge(df_excel, df_ipea, on='Ano', how='inner')

df_combinada['Receita Real'] = df_combinada['Receita L√≠quida'] - (
    df_combinada['Receita L√≠quida'] * (df_combinada['IPCA'] / 100)
)

st.subheader("Tabela com Receita Real ajustada pela infla√ß√£o (IPCA)")
st.dataframe(df_combinada)

"""5) Combine as duas df (Excel e IPEA) em uma nova df e calcule nova coluna chamada Receita Real (peso: 2,0)

- Utilize a fun√ß√£o `pd.merge()` para unificar as duas df utiilizando a coluna Ano como conex√£o (chave prim√°ria) entre elas
- Crie nova coluna chamada Receita Real que ser√° o resultado da Receita L√≠quida de cada ano deduzido o IPCA do ano: `Receita Real = Receitta L√≠quida - ( Receita L√≠quida * (IPCA/100) )`
- Apresente a nova df combinada

"""

import streamlit as st
import pandas as pd
import ipeadatapy as ip

df_ipea = ip.timeseries('PRECOS12_IPCA12')
df_ipea = df_ipea.reset_index()
df_ipea = df_ipea[df_ipea['YEAR'].between(2010, 2024)]
df_ipea = df_ipea.rename(columns={'YEAR': 'Ano', 'VALUE (-)': 'IPCA'})
df_ipea = df_ipea[['Ano', 'IPCA']]

df_excel = pd.read_csv('empresas_dados.csv', delimiter=';')

df_combinada = pd.merge(df_excel, df_ipea, on='Ano', how='inner')

df_combinada['Receita Real'] = df_combinada['Receita L√≠quida'] - (
    df_combinada['Receita L√≠quida'] * (df_combinada['IPCA'] / 100)
)

st.subheader("Tabela com Receita Real ajustada pela infla√ß√£o (IPCA)")
st.dataframe(df_combinada)

"""6) Crie gr√°fico de linha que apresente as vari√°veis Receita L√≠quida e Receita Real ao longo dos anos (no mesmo gr√°fico) (peso: 1,0)"""

import matplotlib.pyplot as plt

df_combinada = df_combinada.sort_values(by='Ano')

plt.figure(figsize=(10, 6))
plt.plot(df_combinada['Ano'], df_combinada['Receita L√≠quida'], marker='o', label='Receita L√≠quida')
plt.plot(df_combinada['Ano'], df_combinada['Receita Real'], marker='s', label='Receita Real', linestyle='--')

plt.title('Receita L√≠quida e Receita Real (2010‚Äì2024)', fontsize=14)
plt.xlabel('Ano', fontsize=12)
plt.ylabel('Valor (R$)', fontsize=12)
plt.grid(True)
plt.legend()
plt.xticks(df_combinada['Ano'], rotation=45)

plt.tight_layout()
plt.show()

"""7) Fa√ßa os ajustes necess√°rios e leve este projeto para a web usando GitHub e Streamlit (peso: 2,0)

- Ca√ßa os ajustes necess√°rios no projeto para ser publicado no Streamlit
- Crie novo reposit√≥rio p√∫blico no GitHub e leve os arquivos .py e .csv pra l√°. Aproveite e crie o arquivo requirements.txt com os pacotes utilizados no projeto
- Crie novo projeto no Streamlit e associe ao reposit√≥rio da lista
"""
